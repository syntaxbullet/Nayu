// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql" // NOTE: sqlite does not work with NextAuth.js
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Note {
    id           String      @id @default(cuid())
    author       User        @relation(fields: [userId], references: [id], onDelete: Cascade) // owner of the note
    userId       String
    title        String
    collection   Collection? @relation(fields: [collectionId], references: [id])
    content      Json
    collectionId String?
}

model Collection {
    id     String @id @default(cuid())
    name   String
    notes  Note[]
    owner  User   @relation(fields: [userId], references: [id])
    userId String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    notes         Note[]
    collections   Collection[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
